// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/migrations/demo/data.sql
// static/templates/error.html
// static/templates/redirect.html
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5f\x4f\xdb\x3e\x14\x7d\xf7\xa7\x38\x8a\x90\x28\xfc\x80\x87\xdf\x78\x40\x44\x7b\x48\x9b\xdb\x92\x2d\x75\x2a\xc7\x16\xa0\x69\xaa\xbc\xc6\x74\x91\x9a\x3f\x24\xce\x18\xdf\x7e\x4a\xdb\xd0\x12\x0a\xda\xde\x22\x9f\x73\xee\x3d\x39\xf7\xda\xe7\xe7\xf8\x2f\x4b\x97\x95\xb6\x06\xaa\x64\x6c\x24\xc8\x93\x04\xba\x93\xc4\xe3\x20\xe2\x70\x9a\x26\x4d\xce\x8b\xba\x2e\x1d\x97\xb1\x7d\x7a\x6c\xb5\x35\x99\xc9\xed\xd0\x2c\xd3\xbc\x53\x8e\x15\x1f\xc9\x56\xd8\x94\x89\xb6\x66\x6e\xd3\xcc\xd4\x56\x67\xe5\xe0\x04\x82\xa4\x12\x3c\x86\x14\xc1\x64\x42\x02\x5e\x8c\xa3\x3e\xed\x88\x0d\x69\x12\x70\x06\x70\xba\xbd\xd8\xa0\xc9\x5c\x5b\x5c\x7f\xc6\xa2\xa9\x2a\x93\xdb\x1d\xd9\x65\xd8\x16\x6d\xd9\x6e\x6b\xef\xdb\xe5\xff\x57\x57\x9f\xbe\x83\x84\x88\xc4\x35\x16\x45\xb3\x4a\x90\x17\x16\x69\x62\x72\x9b\x3e\x3c\x43\xe7\x30\x8f\x8d\x5e\xa5\xf6\x19\x45\x69\x2a\x6d\x8b\x0a\x0f\x45\x05\xfb\x5c\x1a\xfc\xce\x56\x6d\x19\x20\x18\xaf\x1d\x9c\x22\x88\xe1\x07\xb1\x0c\xf8\x48\x62\x2c\xa2\x29\xa2\xd0\xbf\x38\x85\xbc\x21\xbe\x61\xfe\xa5\xd5\x2d\xb7\xe7\x17\xa0\x30\xa6\x1e\x18\x85\x7e\x07\x72\x1f\xc1\xd8\x65\xc4\x7d\x97\xbd\x0d\x0b\xa1\xc7\x27\xca\x9b\x10\xca\x55\xb9\xac\x1f\x57\xee\xe1\x11\x51\x9e\xbc\xcc\x56\xde\xcf\x08\xb1\xf4\xa4\x8a\xdb\x09\x10\x57\x53\x0c\x8e\x4d\xae\x7f\xac\x4c\x72\x7c\x76\x9c\xa4\xf5\xe6\xf3\xc4\xdd\x69\xbc\x61\x48\x70\x1e\x8a\x2a\x9b\xd7\x8b\x9f\x26\xd3\x0e\x06\x0c\x9b\xed\x70\xa0\x54\xe0\x83\x47\x12\x5c\x85\x21\x66\x22\x98\x7a\xe2\x1e\x5f\xe9\x1e\x3e\x8d\x3d\x15\x4a\xb4\xbc\xf9\xd2\xe4\x6d\xdc\x66\xfe\xeb\x72\x70\x72\xb6\x96\xd7\xa6\xea\xc9\xd7\xe7\x5d\x8f\xbb\x69\xd8\x03\xac\xb6\x4d\xed\x74\xfe\x5f\x7a\x76\x7d\x76\xff\xd1\xb2\x17\x95\xd9\xce\xc4\x81\x0c\xa6\x14\x4b\x6f\x3a\x7b\x2b\xca\x8b\xa7\xce\xcf\xcb\x10\xf7\x04\x6c\x3f\x88\xed\xea\x6e\xa2\x48\xb4\xd5\xf3\xad\xc6\xc1\x90\xc6\x91\x20\xa8\x99\xdf\x32\xdb\xbb\xf3\x2a\xaf\x71\x24\x40\xde\xe8\x06\x22\xba\x05\xdd\xd1\x48\x49\xc2\x4c\x44\x23\xf2\x95\xa0\x03\xf7\xe5\x70\xfc\x6d\xcf\x6d\xf8\x6d\xf4\x31\x89\xc0\x7b\x95\xf9\xd9\x3b\x73\x59\x9f\x6f\xd4\x5f\xe2\x88\x0f\x5f\x03\xff\x12\xd5\x3a\x90\xfd\x3d\xf3\x8b\xa7\x9c\x31\x5f\x44\xb3\xb7\x56\xdd\x0e\xf8\x20\xb9\x7e\x56\xee\x81\x62\x7d\x68\xb7\xc5\xdd\xd1\x07\x4f\x4f\x47\x79\xe7\x5d\xfb\x13\x00\x00\xff\xff\xab\x0e\x95\x1f\x06\x05\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 1286, mode: os.FileMode(420), modTime: time.Unix(1511457221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrationsDemoDataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\xd1\x4e\xe3\x46\x14\x7d\xcf\x57\x5c\x8d\x90\x02\x6a\xec\x90\xc4\x09\x09\x10\xd4\x5d\xe2\xdd\x8d\x04\xa1\x0a\xd0\x55\x85\x56\x68\x3c\x9e\x24\x23\xec\xb1\x6b\x8f\x17\x56\xab\x4a\x94\xbe\xb4\x4f\xa8\x7d\xaa\x2a\x55\x6d\xff\x80\x56\x45\xa5\xbb\x24\xfb\x0b\xd7\x7f\x54\xd9\xc1\x6c\x42\x42\x55\xaa\x7d\xa8\xfa\x92\x78\xee\xcc\x3d\xe7\xea\x9c\x3b\x73\x35\x0d\x3e\x72\x45\x3f\xa0\x8a\xc3\xbe\x9f\xcb\x4d\xae\x77\x15\x55\xdc\xe5\x52\x3d\xe6\x7d\x21\x73\x8f\xcd\xa7\xed\xce\x5a\x0e\xa0\xb5\x03\x0b\x0b\x39\x00\x80\x96\xb9\xb9\xf5\xa8\x6b\x82\xcd\x5d\x6f\x3f\xe4\x01\xec\xef\xb7\x5b\xb0\xda\x84\x28\x12\xf6\x61\x9f\x4b\x9e\x00\x1d\xbe\x34\x16\x97\xd6\xa6\x12\xb8\x4b\x85\x93\x04\xb2\x84\xbc\x51\x62\xb4\xca\x97\x1b\x5a\x85\xf1\xb2\x66\x2c\x37\x0c\xcd\x2a\x2d\xd7\xb5\x0a\x67\xac\x5c\x5d\x61\xb5\x1e\x35\xf2\xd3\x20\x7d\xa1\x06\x91\x65\xca\x49\x90\xe5\x6a\xa3\xb6\x52\xd3\x6a\xcc\xaa\x69\x46\xd9\x62\x5a\xa3\x67\x55\xb5\xba\xdd\x2b\xd5\x1a\x0d\xab\x56\xaf\x97\xe6\x82\x74\xa3\x49\x10\xbb\x52\xb1\x2a\xb6\x56\xae\xf5\xb8\x66\x54\xaa\x4c\x6b\x18\xcb\x65\x8d\xd5\xb9\x41\x4b\xbd\xfa\x0a\x63\x19\x48\x2a\x49\xfa\x05\xd0\xee\xec\x9a\xdd\x3d\x68\x77\xf6\x76\x80\xf4\xbc\xc0\x3d\x0c\xd9\x80\xbb\x94\xc0\x22\x49\xe4\x20\x05\x12\x85\x3c\x20\x05\x72\x13\x5f\x82\x4f\x1f\x6d\xed\x9b\xbb\x37\xf9\x00\x8b\xa9\x2a\x85\x4c\xcc\x42\x3e\xb7\x9e\xe0\x80\x43\x65\xbf\x49\xb8\x24\xa0\x84\x72\x78\x93\x98\xa9\x7a\x61\x64\x85\x2c\x10\xbe\x12\x9e\x24\x40\x59\xf2\xdf\x24\x03\xa5\xfc\x70\xb5\x58\x3c\xa2\xae\x70\xf4\x90\xba\xa2\x1f\x39\x8e\x90\xba\x90\x3d\xaf\x48\xc0\xe5\x6a\xe0\xd9\x4d\xe2\x7b\xa1\x22\xc0\x25\x53\xaf\x7c\xde\x24\xd4\xf7\x1d\xc1\x68\x82\x51\x3c\xd1\x8e\x8f\x8f\xb5\x84\x5a\x8b\x02\x87\x4b\xe6\xd9\xdc\x26\x1b\x69\x9d\xeb\x42\xfa\x91\x02\x49\x5d\xde\x24\x69\xbd\x04\xc6\x08\xd9\x62\xa2\x44\x02\x2e\x3d\x71\xb8\xec\xab\x41\x93\xd4\x0c\x02\x01\xff\x3c\x12\x01\xb7\x9b\xa4\x44\x8a\x1b\xb9\xf5\x62\x42\xb2\x91\xcb\x2f\x15\xde\x8b\x90\xb9\xfa\x0f\x74\x78\x2a\xd4\xb3\xc8\x4a\xbb\x0f\x7c\xda\xe7\xf7\xa8\x10\x1e\xe9\x63\x50\x5d\x78\x29\xa3\x46\x7d\xf1\x81\xa5\x48\x7e\x33\x25\x14\x3f\x51\xb7\x35\x76\xd2\x0d\xdf\xa1\x8c\x0f\x3c\xc7\xe6\xc1\x38\xa4\xeb\xfa\x94\x3a\xe5\xea\x8c\x3a\x33\x1c\x3d\xce\x6d\x8b\xb2\xa3\xb9\x3c\x4f\x6e\x37\xa7\xb8\x3e\xf3\xa2\x00\xb2\xc4\x59\xd2\x59\xd6\xbf\xf1\xa4\x1b\xdd\xe7\x49\x10\xdd\xf5\x04\x7f\xc7\x4b\xbc\xc6\xd1\x7f\xd1\x12\xfc\x1e\xaf\xe3\xf3\x3b\x42\x8d\x83\x1f\xdc\x16\xfc\x01\x47\x78\x8d\xd7\x78\x89\xc3\xf8\x0c\x2f\xe2\x53\xbc\xc2\x3f\xef\x72\x7f\x87\x17\xf1\xd7\x80\x6f\xe6\x9d\x7d\x98\x69\x6b\xf7\xbe\x46\x36\x55\x93\x6f\x51\xba\xbc\xef\x09\xca\xbf\xbe\xb9\xce\xab\x07\x44\xf1\x50\x7d\xec\xbe\xd2\xc7\x81\x17\x5f\xcc\xbf\xac\xf9\xd7\x63\xbd\x57\x0f\xc8\xa6\x0e\x1d\x2f\x50\x03\xe6\x29\x0e\x9f\xd0\xe0\x48\xc8\xd0\x93\xe4\x45\xe1\xbd\x52\xab\x07\xe4\xb9\x17\x1c\x01\xf3\xa4\x0a\x28\x53\x21\x28\x0f\x7a\x42\x81\x90\xa0\x06\x1c\x94\x70\x39\x1c\x73\xe8\x8b\x97\x1c\x84\xd2\xe7\xd3\x76\xa3\x49\x5a\xfc\x05\xaf\x52\xc5\xde\x02\xfe\x88\xa3\xf8\x34\x3e\x4b\x04\x8d\xcf\x00\x7f\x4a\xb5\x7c\x83\x57\x38\x8c\xbf\xc4\x11\x0e\xef\x16\x83\x3f\xe3\x05\xfe\x9a\x1c\xc6\x0b\xc0\x3f\xf0\x02\xdf\xe1\x08\xdf\xe2\x30\x3e\xc7\xcb\x04\xe1\xb7\xf8\x34\xe9\xe7\xf8\xbc\x00\xe9\xa9\x77\xf1\x57\xf1\x37\x89\x4f\x38\xc4\x11\x5e\x02\x0e\x93\xc4\x21\x5e\xc6\xdf\x8e\x8b\x1d\xfb\x60\x76\x5a\xc9\xc7\xc2\xc2\x5a\x6e\x73\x67\x7b\xbb\xbd\xb7\x36\x7f\xc0\x9a\xd2\x9e\x1e\xbd\x2d\xef\x58\xfe\xdb\x61\xfc\x3f\x9c\xad\x2d\x73\xcb\xdc\x33\xe1\x49\x77\x67\x7b\xaa\x9b\x9f\x3f\x33\xbb\x26\x8c\x5b\x1a\xda\x9d\xac\x7d\x6f\xbb\x32\x2b\xe0\xf6\x5a\xcc\x02\x65\x43\xfa\x81\x50\x0f\x71\xf6\xaf\x00\x00\x00\xff\xff\x4a\x21\xc3\x22\x64\x09\x00\x00")

func staticMigrationsDemoDataSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrationsDemoDataSql,
		"static/migrations/demo/data.sql",
	)
}

func staticMigrationsDemoDataSql() (*asset, error) {
	bytes, err := staticMigrationsDemoDataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/demo/data.sql", size: 2404, mode: os.FileMode(420), modTime: time.Unix(1517216338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTemplatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x77\xe2\x38\x12\x7e\xcf\xaf\xa8\xf5\x32\x03\x6c\xc7\x36\x09\xb9\x07\x73\x0e\xdb\xb9\x4c\x92\x4e\x26\x40\xd2\x49\xcf\xcb\x1e\x61\x0b\x5b\xc4\x96\xdc\x92\xcc\x65\x39\xfe\xef\x7b\x24\xdb\x60\x02\x64\x7b\xba\xc9\x03\x52\x49\xfa\xea\xab\x52\x55\x51\x4a\xeb\x1f\x17\x7f\x7e\x7e\xfa\xf6\x78\x09\x81\x8c\xc2\xf6\x4e\x4b\x7d\x81\x1b\x22\x21\x1c\x83\x32\x73\x24\x0c\x08\x11\xf5\x1d\x63\x3e\x07\xab\xef\x06\x38\x42\xd6\x17\x44\xfd\x04\xf9\x18\xd2\xd4\x50\x47\x30\xf2\xda\x3b\x00\x00\xad\x08\x4b\x04\x6e\x80\xb8\xc0\xd2\x31\x9e\x9f\xae\xcc\x13\x23\x5f\x92\x44\x86\xb8\x5d\x42\x79\x52\x02\x48\xd3\x96\x9d\x2d\x95\x10\x02\x29\x63\x13\x7f\x4f\xc8\xd8\x31\x38\x1e\x72\x2c\x02\x03\x5c\x46\x25\xa6\x32\x63\x72\x81\x43\x34\xb3\xfa\xd8\x65\xd4\x13\x90\xa6\xe7\x09\x0f\x1d\xb5\xd0\xc3\x1e\xe1\xd8\x95\x19\x37\x0d\x19\x12\xfa\x06\x1c\x87\x8e\x21\xe4\x2c\xc4\x22\xc0\x58\x1a\x10\x70\x3c\x74\x0c\xa5\x49\x9c\xd9\x76\x84\xa6\xae\x47\xad\x01\x63\x52\x48\x8e\x62\x35\x71\x59\x64\x2f\x04\xf6\x81\xd5\xb0\x1a\xb6\x2b\xc4\x52\x66\x45\x84\x5a\xae\x10\x86\xd6\x93\x7d\x08\x95\xd8\xe7\x44\xce\x1c\x43\x04\xa8\x79\x72\x60\x5e\xd3\xc3\xe6\xc9\xc1\xf4\x7b\x77\x0f\xb1\x97\xd7\xce\xa7\xc6\xe1\x49\xef\xf5\x71\xfa\xe8\x1f\x0d\x67\x07\x37\x2f\xe3\xa7\x87\xa0\x71\xb9\x7f\xd4\x7c\x8d\xae\xdc\xdb\xb0\xdf\x99\x90\x6b\xff\xaa\xf3\x62\x7b\x1d\xd2\x3f\xba\x7d\x8d\x0c\x70\x39\x13\x82\x71\xe2\x13\xea\x18\x88\x32\x3a\x8b\x58\x22\x0a\xf3\xb4\x51\xed\x05\x05\x75\x81\xbb\x30\x60\xde\x0c\xe6\x10\x60\xe2\x07\xf2\x0c\xf6\x1a\x8d\xdf\xce\x21\x5d\x6c\xca\x97\x3d\x22\xe2\x10\xcd\xce\x60\x18\xe2\xe9\x39\xa0\x90\xf8\xd4\x24\x12\x47\xe2\x0c\x5c\x4c\x25\xe6\xe7\x30\x40\xee\x9b\xcf\x59\x42\x3d\xd3\x65\x21\xe3\x67\xf0\xcf\xe1\xa1\xfa\x2b\xe3\x59\x2e\xe2\x1e\xcc\x61\x42\x3c\x19\x14\xea\x22\x34\x35\x73\xc1\x51\xa3\x11\x4f\x95\x84\xfb\x84\x9e\x41\x03\x50\x22\xd9\x3a\x80\x15\x73\xe6\x73\x2c\xc4\x07\xd4\x2d\x1d\x95\x2b\x5b\x17\x66\x50\x46\x71\xb1\xb7\x65\x97\x1c\xd3\x12\x2e\x27\xb1\x6c\x4f\x08\xf5\xd8\xc4\xea\x3f\x75\x7a\x4f\xe0\xc0\x05\x92\xd8\xa2\x6c\x52\xab\x9f\xb7\xec\x7c\xcb\x4e\xcb\xce\x02\xba\xa5\x9c\xd4\xde\x99\xcf\x4d\xa8\xc0\x99\x03\x16\x98\x69\xaa\xa7\x13\x22\x83\x22\x8c\x21\x4d\xe7\x73\xa8\x0c\x19\x8f\x96\x9b\x5a\x1e\x19\x17\x49\xa4\x0c\x2b\xae\xea\x9d\xd8\x54\x8a\x30\x37\x74\x56\x2c\xd3\xc1\x23\xe3\x2d\xfb\x15\x23\x63\x79\xd5\x2d\xad\x75\x3e\xcf\x09\xdd\x5c\x40\x9a\x12\x2f\x4b\x10\x15\xff\x6a\x09\x53\x4f\x53\x82\x95\xcf\x32\xa5\xcb\xb9\x0c\x3a\x11\x33\x79\x41\xc7\x00\xe4\x4a\xc2\x68\x26\xed\xe8\xb1\x12\xbf\x03\x5c\xba\xe5\x1e\xcb\x80\x79\x90\xa6\x10\xe9\xd1\x92\xce\x56\x36\xcb\xc3\x97\xd4\x65\x1e\xa1\xfe\xd3\x2c\x56\xca\x01\x53\x57\xce\x62\xbc\x09\xa3\xbd\xf3\x1e\x82\x23\xea\x63\xb0\x6e\x68\x9c\x48\xb1\x41\xcd\xaa\x43\x95\xef\x4c\x15\xd8\x31\x70\x36\x31\xda\x6b\x9b\x0b\x58\x32\x04\x44\x3d\xed\xde\xdc\x2b\x9b\xa0\x35\x7c\x88\x06\x38\x84\x21\xe3\x19\x61\x7d\x21\xc6\xe2\x06\x59\x68\x8a\xc8\x6c\x82\x1a\x68\xed\xd9\xf6\xd5\xa9\x19\xfa\xef\xe3\x41\xcb\x37\xf3\x5b\x89\x90\x0c\xff\xf4\x03\x53\x36\xbb\xbf\x58\x87\xca\x18\x85\xc4\x53\x61\x4c\x99\x84\x5a\xc5\xba\xe4\x9c\x71\xeb\x0f\x24\xf4\x00\xac\x3a\x6c\xb3\x9c\x28\xa7\xaf\xb8\x56\x95\x6b\xce\xb4\x37\x16\x13\x33\xf4\x81\x08\x73\x3e\x57\x4e\xcd\xb5\xa5\xa9\xfe\x56\x17\x1b\x0a\x65\x30\xa1\x0b\x01\xf5\x36\x84\xda\x9a\x55\xa5\xe8\x87\x1f\x0b\xff\x95\x0f\x45\x51\x1e\x60\x0f\x28\xca\xf3\x60\x11\x73\x79\x20\xfe\x20\x87\xe2\xce\xca\x89\xf4\x61\xe4\x6f\xc1\x79\x0c\x91\x8b\x03\x16\x7a\x98\x2b\xb4\x78\x39\xfd\x79\xcc\xaf\x28\x4c\x34\xb7\xb1\x1a\xfc\x3c\xce\x3d\xa1\x5f\x30\xf5\x65\xa0\x53\x9c\xd0\x50\x4f\x7e\x01\x0f\x4d\x4b\x78\x68\xfa\xab\x78\x3d\xd5\x37\x70\xac\x2b\x10\xcf\xc7\xdb\xaa\x46\xf9\xf4\x7a\x9a\x17\xb5\xf8\x03\x06\xa5\x62\x5d\xc6\xda\xb4\x3d\x4f\x91\x2c\xda\xfe\xc3\xf3\x36\xa5\x88\xb5\x80\x78\x1e\xa6\x46\xe9\x72\x2a\x1b\x5a\x99\x05\xd6\xdf\xa9\x63\x1b\x6a\x44\x73\x4b\x8d\x58\x4d\xe3\x81\xa4\x30\x90\xd4\xf4\x54\x5d\xe5\x05\x53\x91\x0c\x22\x22\x37\xe9\x59\xf7\xc5\x16\xf5\xdb\x4a\x54\x79\xeb\xe2\xe7\x5d\xe2\xa9\x34\xb3\x66\x64\xcb\xb1\x6d\x47\xcd\x01\xe2\x50\x9e\x98\x42\x72\x12\x63\x6f\x55\x88\x28\x89\x90\xc4\x1e\x0c\x7c\x53\x24\xae\x8b\x57\x1b\xba\x0d\x1f\xdd\x58\x38\x46\xa9\xd9\xd1\x25\xbb\xb2\xd6\x95\x6e\x71\xc9\x47\xde\x5a\x17\xbf\x13\xb5\x6c\x75\xe3\x79\x83\x90\x2d\xe5\x5f\xe5\xc8\xcb\x1b\x1e\x10\xdc\x5d\x36\xb9\x2e\xf3\xb0\x35\xfa\x9e\x60\x3e\xd3\xcd\x6d\x36\x34\x9b\xd6\xbe\xb5\x67\x89\x90\x44\xba\xa1\x1d\x95\xcc\x5f\xef\x66\xef\x6e\x9b\x6c\xff\xe2\x4e\xde\xbc\x8d\xbf\xdd\xdc\x35\x9f\x2f\x1f\xfe\x1b\xdd\x1f\xdf\x7d\x7e\xeb\x71\x9b\x5f\x9e\xda\xdd\xd8\x3f\x42\x9d\xbf\xae\x6f\x27\x57\x17\xf7\x5f\x1f\x3a\xf6\x75\x7c\x7d\x75\x75\xda\x0c\x5e\xe3\xeb\xc3\xbb\xb7\x87\x25\xf6\xb6\xae\xb6\xd4\x89\x6d\x34\xc2\xa3\x23\x61\xb9\x21\x4b\xbc\x61\x88\x38\xd6\x96\xa0\x11\x9a\xda\x21\x19\x08\x3b\x66\x71\x8c\xb9\x35\x12\xf6\x9e\xb5\xb7\x6f\x9d\xda\x49\xe4\x15\xc2\xff\x6f\x5d\x27\x7e\x18\xf8\xc1\xe9\xbf\x3f\x7d\xdb\xeb\xde\xc9\x71\xb3\x47\x8f\x5f\x9a\x91\xff\x38\x0d\x9e\x4f\xef\xec\xbe\xdb\x15\x9d\xc7\xe3\xe0\x99\x0c\x5e\x9b\xa7\xa3\xe3\x21\x7a\xbb\x7a\x14\x6f\xe3\xd7\x44\x8c\x87\xa8\x31\x38\xe8\xfe\xb2\x75\x3f\xfa\x0e\x19\xbd\x7f\x86\x7c\x6c\xd7\xed\x5f\xbd\xa3\x7e\x8c\x47\xc1\xc1\x73\x63\xdf\x3b\x19\xfd\x29\x8f\xc6\x5f\x2e\xff\x18\x62\xfb\xb6\x7b\x4d\x7a\xbd\x7e\xb7\x3b\xed\x0f\xaf\x5e\x62\xb2\x77\xff\x3d\xf9\xea\x75\x66\xa3\x67\xc4\x0f\x3f\x1d\x1f\x3d\x7e\xfd\x1c\x7d\x0b\x7f\xc2\xae\xf6\x4e\x6d\x98\xd0\xac\x5f\xac\x55\x76\x41\x48\xc4\x65\x1d\xe6\x1a\xa9\x9a\x08\x0c\x2a\x1b\x5d\x59\x3d\xd7\x12\x97\x51\x21\xa1\xb2\x48\x7b\x07\x2a\xb5\xea\xbb\x57\x81\x4a\xd7\x6a\x3d\xdb\x3f\x46\x1c\x24\x89\x30\x4b\xe4\xae\x1e\xf0\x5d\x70\x19\x57\xf5\x92\x30\x5a\x60\x16\x73\x70\xe0\x1e\xc9\xc0\xd2\xef\x98\x5a\x6d\xd9\xf7\x83\x59\x10\xb3\x55\x22\x37\x72\xf4\x1c\x19\x9c\x0c\x1a\x1c\x88\xd5\x9b\xf6\x86\xca\xda\x82\xa2\xa5\x2a\x53\xad\x5e\x3a\xc1\xc1\x74\xd6\x48\x08\x2c\x6f\x54\xf1\x1a\xa3\xb0\xe4\x90\xc2\x11\x8b\xa3\xa6\x79\xbe\xf4\xb1\xf6\x45\x8c\xb9\x2a\x7b\xaa\x37\x5f\x61\xaf\x68\x36\xe0\x5f\xb9\x46\xbb\xe0\x9a\x5b\xb0\x44\x79\x47\x54\x6f\xaf\xab\xe7\x6a\xad\xaa\x2b\x57\x75\xb7\xac\xe2\x13\x54\x7f\x2b\x7c\xab\x63\x68\x08\xb5\xd2\x72\x0b\x0e\x1a\xf0\xfb\xef\x25\xd0\x00\x89\xcf\xaa\xde\xd6\xaa\x03\xdf\x9c\x20\x4e\x09\xf5\xab\xf5\xb2\x5d\xab\x24\x38\x8e\xd8\x18\x6f\x38\x62\x21\xcf\x5b\x8a\xb3\x1f\x9b\x32\x93\x34\x6b\x0c\xd7\x08\x9d\x7c\x44\x28\x2f\xe4\x7f\x87\xd0\xe2\xc8\x2a\xa1\x05\xcf\x12\x23\x3d\x4a\x77\xcb\x11\x53\xa9\x55\xd5\xcb\x5b\x9d\x96\x92\xd7\xaa\xfa\xb7\xa8\xba\x0b\xd5\x91\x50\x47\xd3\x5a\xfe\xf4\x1c\x75\x55\xcd\xdd\x85\xf2\x4b\xb4\x5e\xdf\x29\x3f\x3f\xb3\x77\x67\xcb\xce\xfe\x23\xf3\xbf\x00\x00\x00\xff\xff\x76\x34\x06\x94\xa2\x11\x00\x00")

func staticTemplatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesErrorHtml,
		"static/templates/error.html",
	)
}

func staticTemplatesErrorHtml() (*asset, error) {
	bytes, err := staticTemplatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/error.html", size: 4514, mode: os.FileMode(420), modTime: time.Unix(1517402182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTemplatesRedirectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xdf\x6e\xe2\x3a\x10\xc6\xef\xfb\x14\x3e\xb9\xad\xb0\x81\xf0\xf7\x1c\x82\x94\x53\x08\x5b\x68\x29\x21\x50\xa0\x77\xc6\x71\x12\x87\xc4\x0e\xb6\x43\xc9\x56\xbc\xfb\x0a\xd2\xdd\x56\xbb\xea\x6e\xb5\xbe\xb1\xfd\x8d\x35\xf3\xfd\x46\x23\xf7\xfe\x19\x3c\xdc\x2c\x36\xb3\x21\x88\x74\x9a\xf4\xaf\x7a\xe7\x0d\x24\x98\x87\x96\xf1\xf2\x02\xa0\x47\x22\x9a\x62\x78\x87\x79\x98\xe3\x90\x82\xd3\xc9\x38\x3f\xa2\xd8\xef\x5f\x01\x00\x40\x2f\xa5\x1a\x03\x12\x61\xa9\xa8\xb6\x8c\xe5\xc2\xa9\x74\x8c\xd7\x90\x66\x3a\xa1\xfd\x77\x59\x16\x67\x01\x9c\x4e\x3d\x54\x86\xde\x65\x88\xb4\xce\x2a\x74\x9f\xb3\x83\x65\x48\x1a\x48\xaa\x22\x03\x10\xc1\x35\xe5\xba\x74\x32\xa0\x09\x2e\xa0\x47\x89\xe0\xbe\x02\xa7\xd3\x7f\xb9\x4c\xac\x73\x60\x4e\x7d\x26\x29\xd1\xa5\xb7\x4b\xca\x84\xf1\x1d\x90\x34\xb1\x0c\xa5\x8b\x84\xaa\x88\x52\x6d\x80\x48\xd2\xc0\x32\xce\x95\xd4\xbf\x08\xa5\xf8\x48\x7c\x0e\xb7\x42\x68\xa5\x25\xce\xce\x17\x22\x52\xf4\x43\x40\x0d\x58\x85\x55\x44\x94\x7a\xd3\x60\xca\x38\x24\x4a\x19\x97\x3a\xe5\x62\x5c\xd3\x50\x32\x5d\x58\x86\x8a\xb0\xd9\x69\x54\x46\xbc\x69\x76\x1a\xc7\xbd\x5b\xc3\x62\xb5\xb6\xaf\xab\xcd\xce\x7c\x3d\x3b\xce\xc2\x56\x50\x34\x6e\x57\x87\xc5\x34\xaa\x0e\xeb\x2d\x73\x9d\x3a\x64\x9c\x78\xf6\x33\x1b\x85\x8e\xbd\x42\xbe\xcd\xbc\xd6\x78\x9d\x1a\x80\x48\xa1\x94\x90\x2c\x64\xdc\x32\x30\x17\xbc\x48\x45\xae\xce\xad\x47\x65\xef\x7b\x5b\xe1\x17\xfd\xab\x9e\x22\x92\x65\x1a\x28\x49\xde\xc8\x88\xf0\x29\x8c\xf7\x39\x95\xc5\x85\xa8\x3c\x56\x4c\x58\x87\x35\xa8\x12\x96\x5e\x28\xe2\x77\x10\xbf\x22\x4c\xc6\xa6\xa8\x0f\x26\xfa\x76\x77\xd8\xdc\x4e\xcc\xe5\x70\xfa\x35\xbd\x6f\x4f\x6e\x76\x73\x89\xe4\xb0\x8b\xdc\x2c\x6c\x61\xfb\x69\x34\x7e\x76\x06\xf7\x8f\x53\x1b\x8d\xb2\x91\xe3\x74\xcd\x68\x9d\x8d\x9a\x93\xdd\xf4\x63\x84\x1e\x2a\x3d\x7f\x64\xde\xe7\xb1\x82\x24\x11\xb9\x1f\x24\x58\xd2\x0b\x01\x8e\xf1\x11\x25\x6c\xab\x50\x26\xb2\x8c\x4a\x18\x2b\x54\x83\xb5\x3a\xec\xa2\x3c\xf5\xbf\x8b\x7f\xa6\xb2\xb3\xe9\x36\x8c\xba\xff\x5f\x6f\x6a\xee\x44\x1f\xcc\x39\x6f\xaf\xcc\x34\x9c\x1d\xa3\x65\x77\x82\x3c\xe2\x2a\x7b\xd6\x8e\x96\x6c\xbb\x36\xbb\x71\x3b\xc0\x3b\x67\xa6\x76\x87\x75\xae\x0e\x01\xae\x6e\x1b\xee\x5f\x53\x7d\x76\xd8\xe2\x9f\x67\xed\xf7\x3c\xe3\xa7\x79\xcb\xcb\x68\x1c\x35\x96\xd5\xba\xdf\x89\x1f\x74\xeb\x70\x37\xfc\x12\x50\x34\x76\x47\x6c\x3e\xf7\x5c\xf7\xe8\x05\xce\x2a\x63\xb5\xfb\x7d\xfe\xe8\xdb\x45\xbc\xc4\xb2\x79\xdd\x6e\xcd\x1e\x6f\xd2\x4d\xf2\x29\x1e\xf4\x3a\x6a\xa8\xfc\x21\xbe\x05\x00\x00\xff\xff\xb8\x76\xa4\x4e\x32\x04\x00\x00")

func staticTemplatesRedirectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesRedirectHtml,
		"static/templates/redirect.html",
	)
}

func staticTemplatesRedirectHtml() (*asset, error) {
	bytes, err := staticTemplatesRedirectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/redirect.html", size: 1074, mode: os.FileMode(420), modTime: time.Unix(1517216338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/migrations/demo/data.sql": staticMigrationsDemoDataSql,
	"static/templates/error.html": staticTemplatesErrorHtml,
	"static/templates/redirect.html": staticTemplatesRedirectHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
			"demo": &bintree{nil, map[string]*bintree{
				"data.sql": &bintree{staticMigrationsDemoDataSql, map[string]*bintree{}},
			}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"error.html": &bintree{staticTemplatesErrorHtml, map[string]*bintree{}},
			"redirect.html": &bintree{staticTemplatesRedirectHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

