// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/migrations/demo/data.sql
// static/templates/error.html
// static/templates/redirect.html
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5f\x4f\xdb\x3e\x14\x7d\xf7\xa7\x38\x8a\x90\x28\xfc\x80\x87\xdf\x78\x40\x44\x7b\x48\x9b\xdb\x92\x2d\x75\x2a\xc7\x16\xa0\x69\xaa\xbc\xc6\x74\x91\x9a\x3f\x24\xce\x18\xdf\x7e\x4a\xdb\xd0\x12\x0a\xda\xde\x22\x9f\x73\xee\x3d\x39\xf7\xda\xe7\xe7\xf8\x2f\x4b\x97\x95\xb6\x06\xaa\x64\x6c\x24\xc8\x93\x04\xba\x93\xc4\xe3\x20\xe2\x70\x9a\x26\x4d\xce\x8b\xba\x2e\x1d\x97\xb1\x7d\x7a\x6c\xb5\x35\x99\xc9\xed\xd0\x2c\xd3\xbc\x53\x8e\x15\x1f\xc9\x56\xd8\x94\x89\xb6\x66\x6e\xd3\xcc\xd4\x56\x67\xe5\xe0\x04\x82\xa4\x12\x3c\x86\x14\xc1\x64\x42\x02\x5e\x8c\xa3\x3e\xed\x88\x0d\x69\x12\x70\x06\x70\xba\xbd\xd8\xa0\xc9\x5c\x5b\x5c\x7f\xc6\xa2\xa9\x2a\x93\xdb\x1d\xd9\x65\xd8\x16\x6d\xd9\x6e\x6b\xef\xdb\xe5\xff\x57\x57\x9f\xbe\x83\x84\x88\xc4\x35\x16\x45\xb3\x4a\x90\x17\x16\x69\x62\x72\x9b\x3e\x3c\x43\xe7\x30\x8f\x8d\x5e\xa5\xf6\x19\x45\x69\x2a\x6d\x8b\x0a\x0f\x45\x05\xfb\x5c\x1a\xfc\xce\x56\x6d\x19\x20\x18\xaf\x1d\x9c\x22\x88\xe1\x07\xb1\x0c\xf8\x48\x62\x2c\xa2\x29\xa2\xd0\xbf\x38\x85\xbc\x21\xbe\x61\xfe\xa5\xd5\x2d\xb7\xe7\x17\xa0\x30\xa6\x1e\x18\x85\x7e\x07\x72\x1f\xc1\xd8\x65\xc4\x7d\x97\xbd\x0d\x0b\xa1\xc7\x27\xca\x9b\x10\xca\x55\xb9\xac\x1f\x57\xee\xe1\x11\x51\x9e\xbc\xcc\x56\xde\xcf\x08\xb1\xf4\xa4\x8a\xdb\x09\x10\x57\x53\x0c\x8e\x4d\xae\x7f\xac\x4c\x72\x7c\x76\x9c\xa4\xf5\xe6\xf3\xc4\xdd\x69\xbc\x61\x48\x70\x1e\x8a\x2a\x9b\xd7\x8b\x9f\x26\xd3\x0e\x06\x0c\x9b\xed\x70\xa0\x54\xe0\x83\x47\x12\x5c\x85\x21\x66\x22\x98\x7a\xe2\x1e\x5f\xe9\x1e\x3e\x8d\x3d\x15\x4a\xb4\xbc\xf9\xd2\xe4\x6d\xdc\x66\xfe\xeb\x72\x70\x72\xb6\x96\xd7\xa6\xea\xc9\xd7\xe7\x5d\x8f\xbb\x69\xd8\x03\xac\xb6\x4d\xed\x74\xfe\x5f\x7a\x76\x7d\x76\xff\xd1\xb2\x17\x95\xd9\xce\xc4\x81\x0c\xa6\x14\x4b\x6f\x3a\x7b\x2b\xca\x8b\xa7\xce\xcf\xcb\x10\xf7\x04\x6c\x3f\x88\xed\xea\x6e\xa2\x48\xb4\xd5\xf3\xad\xc6\xc1\x90\xc6\x91\x20\xa8\x99\xdf\x32\xdb\xbb\xf3\x2a\xaf\x71\x24\x40\xde\xe8\x06\x22\xba\x05\xdd\xd1\x48\x49\xc2\x4c\x44\x23\xf2\x95\xa0\x03\xf7\xe5\x70\xfc\x6d\xcf\x6d\xf8\x6d\xf4\x31\x89\xc0\x7b\x95\xf9\xd9\x3b\x73\x59\x9f\x6f\xd4\x5f\xe2\x88\x0f\x5f\x03\xff\x12\xd5\x3a\x90\xfd\x3d\xf3\x8b\xa7\x9c\x31\x5f\x44\xb3\xb7\x56\xdd\x0e\xf8\x20\xb9\x7e\x56\xee\x81\x62\x7d\x68\xb7\xc5\xdd\xd1\x07\x4f\x4f\x47\x79\xe7\x5d\xfb\x13\x00\x00\xff\xff\xab\x0e\x95\x1f\x06\x05\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 1286, mode: os.FileMode(420), modTime: time.Unix(1511457221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrationsDemoDataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xff\x4f\xfa\x48\x10\xfd\xbd\x7f\xc5\x64\x43\x82\xe6\x68\xf9\xf2\x81\xca\x17\x31\xa7\x52\x95\x44\xe1\x82\x70\xe6\x62\x0c\xd9\x6e\x87\x76\x43\xbb\xdb\xdb\x6e\x45\x63\xee\x7f\xbf\xb4\xa5\x2a\x27\xe6\xbc\xfb\xf8\x0b\xd9\x99\x65\xde\xeb\xbc\x37\x3b\xa6\x09\xbf\x44\xdc\x57\x54\x23\x2c\x62\xc3\x78\x1f\xdf\x6a\xaa\x31\x42\xa1\xcf\xd0\xe7\xc2\x38\x73\x2e\xc7\x93\x81\x01\x30\x9a\x42\xa5\x62\x00\x00\x8c\x9c\xf3\xeb\xd3\x99\x03\x1e\x46\x72\x91\xa0\x82\xc5\x62\x3c\x82\xfe\x10\xd2\x94\x7b\x4b\x1f\x05\x66\x40\xcb\xc7\xf6\xc1\xe1\x60\xa7\x00\x23\xca\xc3\x2c\x51\x16\x54\xdb\x4d\x46\x3b\xd8\xe8\x99\x3f\x18\xb6\xcc\x76\xa3\xd7\x36\xdd\x66\xa3\x6b\xfe\x40\xc6\x5a\x9d\x23\x66\xaf\x68\xbb\xba\x0b\xe2\x73\x1d\xa4\xee\x2e\x48\xa3\xd3\xb3\x8f\x6c\xd3\x66\xae\x6d\xb6\x5b\x2e\x33\x7b\x2b\xb7\x63\x76\xbd\x55\xd3\xee\xf5\x5c\xbb\xdb\x6d\x6e\x41\xf2\x6e\xf2\x13\xc0\x78\x72\xeb\xcc\xe6\x30\x9e\xcc\xa7\x40\x56\x52\x45\xcb\x84\x05\x18\x51\x02\x07\x24\xeb\x84\xd4\x48\x9a\xa0\x22\x35\xb2\xcd\x1f\xc2\xef\xa7\xd7\x0b\xe7\x76\x5b\x0f\x70\x90\x37\x54\x2b\x75\xa8\x55\x8d\xe3\x0c\x07\x34\xd7\x21\x0e\x89\x93\xb7\x9b\xa4\x6e\xc2\x14\x8f\x35\x97\x82\x40\x84\x3a\x90\xde\x90\xc4\x32\xd1\x04\x50\x30\xfd\x1c\xe3\x90\xd0\x38\x0e\x39\xa3\xd9\x7f\xea\x4f\xe6\x66\xb3\x31\x33\x20\x33\x55\x21\x0a\x26\x3d\xf4\xc8\x49\xce\x7a\xcc\x45\x9c\x6a\x10\x34\xc2\x21\xc9\xd9\x09\x14\x08\x65\xf0\x8e\x9a\x40\x44\x9f\x42\x14\xbe\x0e\x86\xc4\x6e\x13\x50\xf8\x67\xca\x15\x7a\x43\xd2\x24\xf5\x3d\x80\x4b\x85\x1e\x57\xc8\x74\x09\x1a\x70\xcf\x43\x41\xe0\x91\x86\x69\x16\x6a\x1d\x27\xfd\x7a\x7d\x4d\x23\x1e\x5a\x09\x8d\xb8\x9f\x86\x21\x17\x16\x17\x2b\x59\xcf\x20\x8f\xeb\xd9\x77\x9f\x18\xd5\xc3\xda\x9b\x4a\x85\x63\x9f\xca\x74\xc9\xf5\x55\xea\xe6\xd3\x04\x31\xf5\xf1\x7b\x45\xca\x7e\xcb\x76\x34\x3e\xe9\x57\x89\x26\xf9\x45\x1c\x52\x86\x81\x0c\x3d\x54\x45\xca\xb2\xac\x1d\xdd\x5a\x9d\x7f\xd7\x6d\x85\xe8\xb9\x94\xad\xf7\xf2\x5c\xbc\x5e\xee\x70\xfd\x21\x53\x05\x65\xe1\x47\xd2\x2f\xb0\x7e\xc5\xad\xd2\xac\x64\x6d\x15\x2e\x58\x5c\xe6\x16\x99\x34\xe6\xff\x70\x6c\xf0\xe9\xbb\xf0\xa8\x7e\xff\x2a\xf2\xf0\xb3\xc7\x50\x7d\xd9\x8e\x62\xff\x9e\x68\x4c\xf4\xaf\xd1\xb3\x55\x24\x1e\xfe\xda\x37\x15\xd5\x97\xc2\xa2\xfe\x3d\x39\xb7\x60\x22\x95\x0e\x98\xd4\x08\xbf\x51\xb5\xe6\x22\x91\x82\x3c\xd4\xde\x04\xee\xdf\x93\x3b\xa9\xd6\xc0\xa4\xd0\x8a\x32\x9d\x80\x96\xb0\xe2\x1a\xb8\x00\x1d\x20\x68\x1e\x21\x6c\x10\x7c\xfe\x88\xc0\xb5\x95\x93\x16\x8d\x39\x93\x51\x76\xa8\x54\x06\xc6\xf9\xf4\xe6\x66\x3c\x1f\xec\x5f\x7b\x8e\xf0\x76\x17\xe2\x48\x6e\xc4\xff\x5d\x91\xdb\x8d\xf7\x0d\xfb\xee\x67\xb7\xdd\xc8\xb9\x76\xe6\x0e\x5c\xcc\xa6\x37\x3b\xae\xde\x5d\x39\x33\x07\x0a\x6b\x61\x3c\x29\x6d\xdc\xd2\xbe\x0e\xc5\xc7\xf2\x72\x59\x7e\x09\xe0\xbf\x88\xff\x77\x00\x00\x00\xff\xff\x21\x40\xa2\x27\x9d\x06\x00\x00")

func staticMigrationsDemoDataSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrationsDemoDataSql,
		"static/migrations/demo/data.sql",
	)
}

func staticMigrationsDemoDataSql() (*asset, error) {
	bytes, err := staticMigrationsDemoDataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/demo/data.sql", size: 1693, mode: os.FileMode(420), modTime: time.Unix(1516966352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTemplatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x5d\x6f\xe2\x3a\x10\x86\xef\xfb\x2b\x7c\x72\x5b\x61\x03\xe1\xf3\x1c\x82\x94\x53\x08\x5b\x68\x29\xe1\xa3\x40\xef\x8c\xe3\x24\x0e\x89\x1d\x6c\x87\x92\xad\xf8\xef\xab\x90\xee\xb6\xda\x55\x77\xab\xcd\x4d\xc6\xef\x68\x3c\xf3\x8c\x5e\xb9\xf7\xcf\xe0\xe1\x66\xb9\x9d\x0d\x41\xa8\x93\xb8\x7f\xd5\x2b\x7e\x20\xc6\x3c\xb0\x8c\x97\x17\x00\xef\x30\x0f\x32\x1c\x50\x70\x3e\x1b\x45\x96\x62\xaf\x7f\x05\x00\x00\xbd\x84\x6a\x0c\x48\x88\xa5\xa2\xda\x32\x56\x4b\xa7\xd2\x31\x5e\x53\x9a\xe9\x98\xf6\x8b\xf2\x65\x11\x81\xf3\xb9\x87\x4a\xed\x5d\x69\xa8\x75\x5a\xa1\x87\x8c\x1d\x2d\x43\x52\x5f\x52\x15\x1a\x80\x08\xae\x29\xd7\x65\xef\x01\x8d\x71\x0e\x17\x94\x08\xee\x29\x70\x3e\xff\x97\xc9\xd8\x2a\x12\x73\xea\x31\x49\x89\x2e\x87\xba\x5c\x19\x33\xbe\x07\x92\xc6\x96\xa1\x74\x1e\x53\x15\x52\xaa\x0d\x10\x4a\xea\x5b\x46\xd1\x49\xfd\x8b\x50\x82\x4f\xc4\xe3\x70\x27\x84\x56\x5a\xe2\xb4\x38\x10\x91\xa0\x1f\x02\x6a\xc0\x2a\xac\x22\xa2\xd4\x9b\x06\x13\xc6\x21\x51\xca\xb8\xf4\x29\x3f\xc6\x35\x0d\x24\xd3\xb9\x65\xa8\x10\x9b\x9d\x46\x65\xc4\x9b\x66\xa7\x71\x3a\xb8\x35\x2c\xd6\x1b\xfb\xba\xda\xec\xcc\x37\xb3\xd3\x2c\x68\xf9\x79\xe3\x76\x7d\x5c\x4e\xc3\xea\xb0\xde\x32\x37\x89\x43\xc6\xf1\xc2\x7e\x66\xa3\xc0\xb1\xd7\xc8\xb3\xd9\xa2\x35\xde\x24\x06\x20\x52\x28\x25\x24\x0b\x18\xb7\x0c\xcc\x05\xcf\x13\x91\xa9\x62\xe7\xa8\x5c\x7a\x6f\x27\xbc\xbc\x7f\xd5\x53\x44\xb2\x54\x03\x25\xc9\x1b\x19\x11\x1e\x85\xd1\x21\xa3\x32\xbf\x10\x95\x61\xc5\x84\x75\x58\x83\x2a\x66\xc9\x85\x22\x7a\x07\xf1\x2b\xc2\x64\x6c\x8a\xfa\x60\xa2\x6f\xf7\xc7\xed\xed\xc4\x5c\x0d\xa7\x5f\x93\xfb\xf6\xe4\x66\x3f\x97\x48\x0e\xbb\xc8\x4d\x83\x16\xb6\x9f\x46\xe3\x67\x67\x70\xff\x38\xb5\xd1\x28\x1d\x39\x4e\xd7\x0c\x37\xe9\xa8\x39\xd9\x4f\x3f\x46\xe8\xa1\x72\xe6\x8f\x86\xf7\x78\xa4\x20\x89\x45\xe6\xf9\x31\x96\xf4\x42\x80\x23\x7c\x42\x31\xdb\x29\x94\x8a\x34\xa5\x12\x46\x0a\xd5\x60\xad\x0e\xbb\x28\x4b\xbc\xef\xe2\x9f\xa9\xec\x74\xba\x0b\xc2\xee\xff\xd7\xdb\x9a\x3b\xd1\x47\x73\xce\xdb\x6b\x33\x09\x66\xa7\x70\xd5\x9d\xa0\x05\x71\x95\x3d\x6b\x87\x2b\xb6\xdb\x98\xdd\xa8\xed\xe3\xbd\x33\x53\xfb\xe3\x26\x53\x47\x1f\x57\x77\x0d\xf7\xaf\xa9\x3e\x6b\xb6\xe8\x67\xaf\xfd\x9e\x67\xfc\x34\x6f\x2d\x52\x1a\x85\x8d\x55\xb5\xee\x75\xa2\x07\xdd\x3a\xde\x0d\xbf\xf8\x14\x8d\xdd\x11\x9b\xcf\x17\xae\x7b\x5a\xf8\xce\x3a\x65\xb5\xfb\x43\xf6\xe8\xd9\x79\xb4\xc2\xb2\x79\xdd\x6e\xcd\x1e\x6f\x92\x6d\xfc\x29\x1e\xf4\x6a\x35\x54\xbe\x09\xdf\x02\x00\x00\xff\xff\x57\x35\xba\xdc\x24\x04\x00\x00")

func staticTemplatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesErrorHtml,
		"static/templates/error.html",
	)
}

func staticTemplatesErrorHtml() (*asset, error) {
	bytes, err := staticTemplatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/error.html", size: 1060, mode: os.FileMode(420), modTime: time.Unix(1516638007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTemplatesRedirectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x5d\x6f\xe2\x3a\x10\x86\xef\xfb\x2b\x7c\x72\x5b\x61\x03\xe1\xf3\x1c\x82\x94\x53\x08\x5b\x68\x29\xe1\xa3\x40\xef\x8c\xe3\x24\x0e\x89\x1d\x6c\x87\x92\xad\xf8\xef\xab\x90\xee\xb6\xda\x55\x77\xab\xcd\x4d\xc6\xef\x68\x3c\xf3\x8c\x5e\xb9\xf7\xcf\xe0\xe1\x66\xb9\x9d\x0d\x41\xa8\x93\xb8\x7f\xd5\x2b\x7e\x20\xc6\x3c\xb0\x8c\x97\x17\x00\xef\x30\x0f\x32\x1c\x50\x70\x3e\x1b\x45\x96\x62\xaf\x7f\x05\x00\x00\xbd\x84\x6a\x0c\x48\x88\xa5\xa2\xda\x32\x56\x4b\xa7\xd2\x31\x5e\x53\x9a\xe9\x98\xf6\x8b\xf2\x65\x11\x81\xf3\xb9\x87\x4a\xed\x5d\x69\xa8\x75\x5a\xa1\x87\x8c\x1d\x2d\x43\x52\x5f\x52\x15\x1a\x80\x08\xae\x29\xd7\x65\xef\x01\x8d\x71\x0e\x17\x94\x08\xee\x29\x70\x3e\xff\x97\xc9\xd8\x2a\x12\x73\xea\x31\x49\x89\x2e\x87\xba\x5c\x19\x33\xbe\x07\x92\xc6\x96\xa1\x74\x1e\x53\x15\x52\xaa\x0d\x10\x4a\xea\x5b\x46\xd1\x49\xfd\x8b\x50\x82\x4f\xc4\xe3\x70\x27\x84\x56\x5a\xe2\xb4\x38\x10\x91\xa0\x1f\x02\x6a\xc0\x2a\xac\x22\xa2\xd4\x9b\x06\x13\xc6\x21\x51\xca\xb8\xf4\x29\x3f\xc6\x35\x0d\x24\xd3\xb9\x65\xa8\x10\x9b\x9d\x46\x65\xc4\x9b\x66\xa7\x71\x3a\xb8\x35\x2c\xd6\x1b\xfb\xba\xda\xec\xcc\x37\xb3\xd3\x2c\x68\xf9\x79\xe3\x76\x7d\x5c\x4e\xc3\xea\xb0\xde\x32\x37\x89\x43\xc6\xf1\xc2\x7e\x66\xa3\xc0\xb1\xd7\xc8\xb3\xd9\xa2\x35\xde\x24\x06\x20\x52\x28\x25\x24\x0b\x18\xb7\x0c\xcc\x05\xcf\x13\x91\xa9\x62\xe7\xa8\x5c\x7a\x6f\x27\xbc\xbc\x7f\xd5\x53\x44\xb2\x54\x03\x25\xc9\x1b\x19\x11\x1e\x85\xd1\x21\xa3\x32\xbf\x10\x95\x61\xc5\x84\x75\x58\x83\x2a\x66\xc9\x85\x22\x7a\x07\xf1\x2b\xc2\x64\x6c\x8a\xfa\x60\xa2\x6f\xf7\xc7\xed\xed\xc4\x5c\x0d\xa7\x5f\x93\xfb\xf6\xe4\x66\x3f\x97\x48\x0e\xbb\xc8\x4d\x83\x16\xb6\x9f\x46\xe3\x67\x67\x70\xff\x38\xb5\xd1\x28\x1d\x39\x4e\xd7\x0c\x37\xe9\xa8\x39\xd9\x4f\x3f\x46\xe8\xa1\x72\xe6\x8f\x86\xf7\x78\xa4\x20\x89\x45\xe6\xf9\x31\x96\xf4\x42\x80\x23\x7c\x42\x31\xdb\x29\x94\x8a\x34\xa5\x12\x46\x0a\xd5\x60\xad\x0e\xbb\x28\x4b\xbc\xef\xe2\x9f\xa9\xec\x74\xba\x0b\xc2\xee\xff\xd7\xdb\x9a\x3b\xd1\x47\x73\xce\xdb\x6b\x33\x09\x66\xa7\x70\xd5\x9d\xa0\x05\x71\x95\x3d\x6b\x87\x2b\xb6\xdb\x98\xdd\xa8\xed\xe3\xbd\x33\x53\xfb\xe3\x26\x53\x47\x1f\x57\x77\x0d\xf7\xaf\xa9\x3e\x6b\xb6\xe8\x67\xaf\xfd\x9e\x67\xfc\x34\x6f\x2d\x52\x1a\x85\x8d\x55\xb5\xee\x75\xa2\x07\xdd\x3a\xde\x0d\xbf\xf8\x14\x8d\xdd\x11\x9b\xcf\x17\xae\x7b\x5a\xf8\xce\x3a\x65\xb5\xfb\x43\xf6\xe8\xd9\x79\xb4\xc2\xb2\x79\xdd\x6e\xcd\x1e\x6f\x92\x6d\xfc\x29\x1e\xf4\x6a\x35\x54\xbe\x09\xdf\x02\x00\x00\xff\xff\x57\x35\xba\xdc\x24\x04\x00\x00")

func staticTemplatesRedirectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesRedirectHtml,
		"static/templates/redirect.html",
	)
}

func staticTemplatesRedirectHtml() (*asset, error) {
	bytes, err := staticTemplatesRedirectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/redirect.html", size: 1060, mode: os.FileMode(420), modTime: time.Unix(1516638007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/migrations/demo/data.sql": staticMigrationsDemoDataSql,
	"static/templates/error.html": staticTemplatesErrorHtml,
	"static/templates/redirect.html": staticTemplatesRedirectHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
			"demo": &bintree{nil, map[string]*bintree{
				"data.sql": &bintree{staticMigrationsDemoDataSql, map[string]*bintree{}},
			}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"error.html": &bintree{staticTemplatesErrorHtml, map[string]*bintree{}},
			"redirect.html": &bintree{staticTemplatesRedirectHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

