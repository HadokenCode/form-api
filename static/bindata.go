// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/migrations/demo/data.sql
// static/templates/error.html
// static/templates/redirect.html
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5f\x4f\xdb\x3e\x14\x7d\xf7\xa7\x38\x8a\x90\x28\xfc\x80\x87\xdf\x78\x40\x44\x7b\x48\x9b\xdb\x92\x2d\x75\x2a\xc7\x16\xa0\x69\xaa\xbc\xc6\x74\x91\x9a\x3f\x24\xce\x18\xdf\x7e\x4a\xdb\xd0\x12\x0a\xda\xde\x22\x9f\x73\xee\x3d\x39\xf7\xda\xe7\xe7\xf8\x2f\x4b\x97\x95\xb6\x06\xaa\x64\x6c\x24\xc8\x93\x04\xba\x93\xc4\xe3\x20\xe2\x70\x9a\x26\x4d\xce\x8b\xba\x2e\x1d\x97\xb1\x7d\x7a\x6c\xb5\x35\x99\xc9\xed\xd0\x2c\xd3\xbc\x53\x8e\x15\x1f\xc9\x56\xd8\x94\x89\xb6\x66\x6e\xd3\xcc\xd4\x56\x67\xe5\xe0\x04\x82\xa4\x12\x3c\x86\x14\xc1\x64\x42\x02\x5e\x8c\xa3\x3e\xed\x88\x0d\x69\x12\x70\x06\x70\xba\xbd\xd8\xa0\xc9\x5c\x5b\x5c\x7f\xc6\xa2\xa9\x2a\x93\xdb\x1d\xd9\x65\xd8\x16\x6d\xd9\x6e\x6b\xef\xdb\xe5\xff\x57\x57\x9f\xbe\x83\x84\x88\xc4\x35\x16\x45\xb3\x4a\x90\x17\x16\x69\x62\x72\x9b\x3e\x3c\x43\xe7\x30\x8f\x8d\x5e\xa5\xf6\x19\x45\x69\x2a\x6d\x8b\x0a\x0f\x45\x05\xfb\x5c\x1a\xfc\xce\x56\x6d\x19\x20\x18\xaf\x1d\x9c\x22\x88\xe1\x07\xb1\x0c\xf8\x48\x62\x2c\xa2\x29\xa2\xd0\xbf\x38\x85\xbc\x21\xbe\x61\xfe\xa5\xd5\x2d\xb7\xe7\x17\xa0\x30\xa6\x1e\x18\x85\x7e\x07\x72\x1f\xc1\xd8\x65\xc4\x7d\x97\xbd\x0d\x0b\xa1\xc7\x27\xca\x9b\x10\xca\x55\xb9\xac\x1f\x57\xee\xe1\x11\x51\x9e\xbc\xcc\x56\xde\xcf\x08\xb1\xf4\xa4\x8a\xdb\x09\x10\x57\x53\x0c\x8e\x4d\xae\x7f\xac\x4c\x72\x7c\x76\x9c\xa4\xf5\xe6\xf3\xc4\xdd\x69\xbc\x61\x48\x70\x1e\x8a\x2a\x9b\xd7\x8b\x9f\x26\xd3\x0e\x06\x0c\x9b\xed\x70\xa0\x54\xe0\x83\x47\x12\x5c\x85\x21\x66\x22\x98\x7a\xe2\x1e\x5f\xe9\x1e\x3e\x8d\x3d\x15\x4a\xb4\xbc\xf9\xd2\xe4\x6d\xdc\x66\xfe\xeb\x72\x70\x72\xb6\x96\xd7\xa6\xea\xc9\xd7\xe7\x5d\x8f\xbb\x69\xd8\x03\xac\xb6\x4d\xed\x74\xfe\x5f\x7a\x76\x7d\x76\xff\xd1\xb2\x17\x95\xd9\xce\xc4\x81\x0c\xa6\x14\x4b\x6f\x3a\x7b\x2b\xca\x8b\xa7\xce\xcf\xcb\x10\xf7\x04\x6c\x3f\x88\xed\xea\x6e\xa2\x48\xb4\xd5\xf3\xad\xc6\xc1\x90\xc6\x91\x20\xa8\x99\xdf\x32\xdb\xbb\xf3\x2a\xaf\x71\x24\x40\xde\xe8\x06\x22\xba\x05\xdd\xd1\x48\x49\xc2\x4c\x44\x23\xf2\x95\xa0\x03\xf7\xe5\x70\xfc\x6d\xcf\x6d\xf8\x6d\xf4\x31\x89\xc0\x7b\x95\xf9\xd9\x3b\x73\x59\x9f\x6f\xd4\x5f\xe2\x88\x0f\x5f\x03\xff\x12\xd5\x3a\x90\xfd\x3d\xf3\x8b\xa7\x9c\x31\x5f\x44\xb3\xb7\x56\xdd\x0e\xf8\x20\xb9\x7e\x56\xee\x81\x62\x7d\x68\xb7\xc5\xdd\xd1\x07\x4f\x4f\x47\x79\xe7\x5d\xfb\x13\x00\x00\xff\xff\xab\x0e\x95\x1f\x06\x05\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 1286, mode: os.FileMode(420), modTime: time.Unix(1511463355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrationsDemoDataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xfd\x4b\xe3\x40\x10\xfd\x3d\x7f\xc5\xb0\x14\xaa\x5c\x93\x7e\xd8\xc6\x7e\x18\x39\xb5\x51\x0b\xda\x1e\xb5\x3d\x39\x44\x64\xb3\x99\x26\x4b\x93\xdd\x5c\xb2\xb1\x8a\xdc\xff\x7e\x24\x69\xd5\x50\x0b\xf7\xe1\x2f\xc9\xee\x2c\xf3\xde\xbc\x99\xe1\xe9\x3a\x7c\x09\xb9\x17\x53\x85\x30\x8f\x34\xed\xfd\xfd\x46\x51\x85\x21\x0a\x75\x8a\x1e\x17\xda\xa9\x7d\x31\x1a\x0f\x34\x80\xe1\x04\x2a\x15\x0d\x00\x60\x68\x9f\x5d\x9d\x4c\x6d\x70\x31\x94\xf3\x04\x63\x98\xcf\x47\x43\xe8\x5b\x90\xa6\xdc\x7d\xf0\x50\x60\x06\xf4\xf0\xd8\xde\xdb\x1f\x94\x12\x30\xa4\x3c\xc8\x02\x9b\x84\x6a\xbb\xc9\x68\x07\x1b\x3d\xfd\x80\x61\x4b\x6f\x37\x7a\x6d\xdd\x69\x36\xba\xfa\x01\x32\xd6\xea\x1c\x32\x73\x41\xdb\xd5\x32\x88\xc7\x95\x9f\x3a\x65\x90\x46\xa7\x67\x1e\x9a\xba\xc9\x1c\x53\x6f\xb7\x1c\xa6\xf7\x16\x4e\x47\xef\xba\x8b\xa6\xd9\xeb\x39\x66\xb7\xdb\x5c\x83\xe4\x6a\xf2\x13\xc0\x68\x7c\x63\x4f\x67\x30\x1a\xcf\x26\x40\x16\x32\x0e\x1f\x12\xe6\x63\x48\x09\xec\x91\x4c\x09\xa9\x91\x34\xc1\x98\xd4\xc8\x3a\xbe\x0f\xdf\x4f\xae\xe6\xf6\xcd\x3a\x1f\x60\x2f\x17\x54\xdb\xf4\xa1\x56\xd5\x8e\x32\x1c\x50\x5c\x05\x68\x11\x3b\x97\x9b\xa4\x4e\xc2\x62\x1e\x29\x2e\x05\x01\xca\xb2\xbf\x45\x7c\xa5\xa2\xa4\x5f\xaf\x2f\x69\xc8\x03\x23\xa1\x21\xf7\xd2\x20\xe0\xc2\xe0\x62\x21\xeb\x04\x42\x54\xbe\x74\x2d\x12\xc9\x44\x11\x40\xc1\xd4\x73\x84\x16\xa1\x51\x14\x70\x46\x33\x8c\xfa\x93\xbe\x5a\xad\xf4\x8c\x50\x4f\xe3\x00\x05\x93\x2e\xba\xe4\x38\xaf\xee\x88\x8b\x28\x55\x20\x68\x88\x16\xc9\xab\x24\x50\x20\x6c\x2e\xef\x4a\x24\x10\xd2\xa7\x00\x85\xa7\x7c\x8b\x98\x6d\x02\x31\xfe\x4c\x79\x8c\xae\x45\x9a\xa4\x7e\xac\x1d\xd5\x33\x92\x63\xad\xba\x5f\x7b\x93\x5e\x8c\x61\xa7\xf6\x0b\xae\x2e\x53\x27\x5f\x11\x88\xa8\x87\x3b\x94\x27\x4b\xa3\x00\x32\xb8\xcc\x59\x74\x1a\xf1\x4f\x96\x9f\x7d\x37\xea\x15\x3e\xa9\x57\xf1\xe3\xfc\x21\x0a\x28\x43\x5f\x06\x2e\xc6\x45\xc8\x30\x8c\x52\x47\x5a\x9d\xad\x8e\x6c\x71\x2c\x10\x5d\x87\xb2\xe5\x87\x3c\xe7\xaf\x8f\x25\xae\x1f\x32\x8d\x61\x93\xb8\x4d\xba\xcd\xfa\x36\x87\xc1\xce\x15\x76\xa9\x7a\xbf\xc0\xf9\x75\xd7\xde\x56\x5f\xd6\xdb\xd0\xbf\x23\x0a\x13\xf5\x35\x7c\x36\x8a\xc0\xfd\xaf\x8f\x66\x5d\x7d\x29\x7a\xd9\xbf\x23\x67\x06\x8c\x65\xac\x7c\x26\x15\xc2\x37\x1a\x2f\xb9\x48\xa4\x20\xf7\xb5\xb7\x4e\xf4\xef\xc8\xad\x8c\x97\xc0\xa4\x50\x31\x65\x2a\x01\x25\x61\xc1\x15\x70\x01\xca\x47\x50\x3c\x44\x58\x21\x78\xfc\x11\x81\x2b\x23\x27\x2d\x84\xd9\xe3\x61\x76\xa8\x54\x06\xda\xd9\xe4\xfa\x7a\x34\x1b\x7c\xec\x50\xb6\x70\xcb\xde\x35\x94\x2b\xf1\xaf\x6e\xb6\x36\xa7\x4f\xb0\xa6\xff\x35\xa6\xa1\x7d\x65\xcf\x6c\x38\x9f\x4e\xae\x4b\x53\xbd\xbd\xb4\xa7\x36\x14\xa3\x85\xd1\x78\x33\xc6\x35\xed\xeb\x52\x6c\xa7\x6f\x7c\xed\x8f\x00\xfe\xa6\xf9\xbf\x03\x00\x00\xff\xff\xf3\x20\xe9\xb7\x48\x06\x00\x00")

func staticMigrationsDemoDataSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrationsDemoDataSql,
		"static/migrations/demo/data.sql",
	)
}

func staticMigrationsDemoDataSql() (*asset, error) {
	bytes, err := staticMigrationsDemoDataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/demo/data.sql", size: 1608, mode: os.FileMode(420), modTime: time.Unix(1517130650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTemplatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xdf\x6e\xe2\x3a\x10\xc6\xef\xfb\x14\x3e\xb9\xad\xb0\x81\xf0\xf7\x1c\x82\x94\x53\x08\x5b\x68\x29\x21\x50\xa0\x77\xc6\x71\x12\x87\xc4\x0e\xb6\x43\xc9\x56\xbc\xfb\x0a\xd2\xdd\x56\xbb\xea\x6e\xb5\xbe\xb1\xfd\x8d\x35\xf3\xfd\x46\x23\xf7\xfe\x19\x3c\xdc\x2c\x36\xb3\x21\x88\x74\x9a\xf4\xaf\x7a\xe7\x0d\x24\x98\x87\x96\xf1\xf2\x02\xa0\x47\x22\x9a\x62\x78\x87\x79\x98\xe3\x90\x82\xd3\xc9\x38\x3f\xa2\xd8\xef\x5f\x01\x00\x40\x2f\xa5\x1a\x03\x12\x61\xa9\xa8\xb6\x8c\xe5\xc2\xa9\x74\x8c\xd7\x90\x66\x3a\xa1\xfd\x77\x59\x16\x67\x01\x9c\x4e\x3d\x54\x86\xde\x65\x88\xb4\xce\x2a\x74\x9f\xb3\x83\x65\x48\x1a\x48\xaa\x22\x03\x10\xc1\x35\xe5\xba\x74\x32\xa0\x09\x2e\xa0\x47\x89\xe0\xbe\x02\xa7\xd3\x7f\xb9\x4c\xac\x73\x60\x4e\x7d\x26\x29\xd1\xa5\xb7\x4b\xca\x84\xf1\x1d\x90\x34\xb1\x0c\xa5\x8b\x84\xaa\x88\x52\x6d\x80\x48\xd2\xc0\x32\xce\x95\xd4\xbf\x08\xa5\xf8\x48\x7c\x0e\xb7\x42\x68\xa5\x25\xce\xce\x17\x22\x52\xf4\x43\x40\x0d\x58\x85\x55\x44\x94\x7a\xd3\x60\xca\x38\x24\x4a\x19\x97\x3a\xe5\x62\x5c\xd3\x50\x32\x5d\x58\x86\x8a\xb0\xd9\x69\x54\x46\xbc\x69\x76\x1a\xc7\xbd\x5b\xc3\x62\xb5\xb6\xaf\xab\xcd\xce\x7c\x3d\x3b\xce\xc2\x56\x50\x34\x6e\x57\x87\xc5\x34\xaa\x0e\xeb\x2d\x73\x9d\x3a\x64\x9c\x78\xf6\x33\x1b\x85\x8e\xbd\x42\xbe\xcd\xbc\xd6\x78\x9d\x1a\x80\x48\xa1\x94\x90\x2c\x64\xdc\x32\x30\x17\xbc\x48\x45\xae\xce\xad\x47\x65\xef\x7b\x5b\xe1\x17\xfd\xab\x9e\x22\x92\x65\x1a\x28\x49\xde\xc8\x88\xf0\x29\x8c\xf7\x39\x95\xc5\x85\xa8\x3c\x56\x4c\x58\x87\x35\xa8\x12\x96\x5e\x28\xe2\x77\x10\xbf\x22\x4c\xc6\xa6\xa8\x0f\x26\xfa\x76\x77\xd8\xdc\x4e\xcc\xe5\x70\xfa\x35\xbd\x6f\x4f\x6e\x76\x73\x89\xe4\xb0\x8b\xdc\x2c\x6c\x61\xfb\x69\x34\x7e\x76\x06\xf7\x8f\x53\x1b\x8d\xb2\x91\xe3\x74\xcd\x68\x9d\x8d\x9a\x93\xdd\xf4\x63\x84\x1e\x2a\x3d\x7f\x64\xde\xe7\xb1\x82\x24\x11\xb9\x1f\x24\x58\xd2\x0b\x01\x8e\xf1\x11\x25\x6c\xab\x50\x26\xb2\x8c\x4a\x18\x2b\x54\x83\xb5\x3a\xec\xa2\x3c\xf5\xbf\x8b\x7f\xa6\xb2\xb3\xe9\x36\x8c\xba\xff\x5f\x6f\x6a\xee\x44\x1f\xcc\x39\x6f\xaf\xcc\x34\x9c\x1d\xa3\x65\x77\x82\x3c\xe2\x2a\x7b\xd6\x8e\x96\x6c\xbb\x36\xbb\x71\x3b\xc0\x3b\x67\xa6\x76\x87\x75\xae\x0e\x01\xae\x6e\x1b\xee\x5f\x53\x7d\x76\xd8\xe2\x9f\x67\xed\xf7\x3c\xe3\xa7\x79\xcb\xcb\x68\x1c\x35\x96\xd5\xba\xdf\x89\x1f\x74\xeb\x70\x37\xfc\x12\x50\x34\x76\x47\x6c\x3e\xf7\x5c\xf7\xe8\x05\xce\x2a\x63\xb5\xfb\x7d\xfe\xe8\xdb\x45\xbc\xc4\xb2\x79\xdd\x6e\xcd\x1e\x6f\xd2\x4d\xf2\x29\x1e\xf4\x3a\x6a\xa8\xfc\x21\xbe\x05\x00\x00\xff\xff\xb8\x76\xa4\x4e\x32\x04\x00\x00")

func staticTemplatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesErrorHtml,
		"static/templates/error.html",
	)
}

func staticTemplatesErrorHtml() (*asset, error) {
	bytes, err := staticTemplatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/error.html", size: 1074, mode: os.FileMode(420), modTime: time.Unix(1517135973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTemplatesRedirectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xdf\x6e\xe2\x3a\x10\xc6\xef\xfb\x14\x3e\xb9\xad\xb0\x81\xf0\xf7\x1c\x82\x94\x53\x08\x5b\x68\x29\x21\x50\xa0\x77\xc6\x71\x12\x87\xc4\x0e\xb6\x43\xc9\x56\xbc\xfb\x0a\xd2\xdd\x56\xbb\xea\x6e\xb5\xbe\xb1\xfd\x8d\x35\xf3\xfd\x46\x23\xf7\xfe\x19\x3c\xdc\x2c\x36\xb3\x21\x88\x74\x9a\xf4\xaf\x7a\xe7\x0d\x24\x98\x87\x96\xf1\xf2\x02\xa0\x47\x22\x9a\x62\x78\x87\x79\x98\xe3\x90\x82\xd3\xc9\x38\x3f\xa2\xd8\xef\x5f\x01\x00\x40\x2f\xa5\x1a\x03\x12\x61\xa9\xa8\xb6\x8c\xe5\xc2\xa9\x74\x8c\xd7\x90\x66\x3a\xa1\xfd\x77\x59\x16\x67\x01\x9c\x4e\x3d\x54\x86\xde\x65\x88\xb4\xce\x2a\x74\x9f\xb3\x83\x65\x48\x1a\x48\xaa\x22\x03\x10\xc1\x35\xe5\xba\x74\x32\xa0\x09\x2e\xa0\x47\x89\xe0\xbe\x02\xa7\xd3\x7f\xb9\x4c\xac\x73\x60\x4e\x7d\x26\x29\xd1\xa5\xb7\x4b\xca\x84\xf1\x1d\x90\x34\xb1\x0c\xa5\x8b\x84\xaa\x88\x52\x6d\x80\x48\xd2\xc0\x32\xce\x95\xd4\xbf\x08\xa5\xf8\x48\x7c\x0e\xb7\x42\x68\xa5\x25\xce\xce\x17\x22\x52\xf4\x43\x40\x0d\x58\x85\x55\x44\x94\x7a\xd3\x60\xca\x38\x24\x4a\x19\x97\x3a\xe5\x62\x5c\xd3\x50\x32\x5d\x58\x86\x8a\xb0\xd9\x69\x54\x46\xbc\x69\x76\x1a\xc7\xbd\x5b\xc3\x62\xb5\xb6\xaf\xab\xcd\xce\x7c\x3d\x3b\xce\xc2\x56\x50\x34\x6e\x57\x87\xc5\x34\xaa\x0e\xeb\x2d\x73\x9d\x3a\x64\x9c\x78\xf6\x33\x1b\x85\x8e\xbd\x42\xbe\xcd\xbc\xd6\x78\x9d\x1a\x80\x48\xa1\x94\x90\x2c\x64\xdc\x32\x30\x17\xbc\x48\x45\xae\xce\xad\x47\x65\xef\x7b\x5b\xe1\x17\xfd\xab\x9e\x22\x92\x65\x1a\x28\x49\xde\xc8\x88\xf0\x29\x8c\xf7\x39\x95\xc5\x85\xa8\x3c\x56\x4c\x58\x87\x35\xa8\x12\x96\x5e\x28\xe2\x77\x10\xbf\x22\x4c\xc6\xa6\xa8\x0f\x26\xfa\x76\x77\xd8\xdc\x4e\xcc\xe5\x70\xfa\x35\xbd\x6f\x4f\x6e\x76\x73\x89\xe4\xb0\x8b\xdc\x2c\x6c\x61\xfb\x69\x34\x7e\x76\x06\xf7\x8f\x53\x1b\x8d\xb2\x91\xe3\x74\xcd\x68\x9d\x8d\x9a\x93\xdd\xf4\x63\x84\x1e\x2a\x3d\x7f\x64\xde\xe7\xb1\x82\x24\x11\xb9\x1f\x24\x58\xd2\x0b\x01\x8e\xf1\x11\x25\x6c\xab\x50\x26\xb2\x8c\x4a\x18\x2b\x54\x83\xb5\x3a\xec\xa2\x3c\xf5\xbf\x8b\x7f\xa6\xb2\xb3\xe9\x36\x8c\xba\xff\x5f\x6f\x6a\xee\x44\x1f\xcc\x39\x6f\xaf\xcc\x34\x9c\x1d\xa3\x65\x77\x82\x3c\xe2\x2a\x7b\xd6\x8e\x96\x6c\xbb\x36\xbb\x71\x3b\xc0\x3b\x67\xa6\x76\x87\x75\xae\x0e\x01\xae\x6e\x1b\xee\x5f\x53\x7d\x76\xd8\xe2\x9f\x67\xed\xf7\x3c\xe3\xa7\x79\xcb\xcb\x68\x1c\x35\x96\xd5\xba\xdf\x89\x1f\x74\xeb\x70\x37\xfc\x12\x50\x34\x76\x47\x6c\x3e\xf7\x5c\xf7\xe8\x05\xce\x2a\x63\xb5\xfb\x7d\xfe\xe8\xdb\x45\xbc\xc4\xb2\x79\xdd\x6e\xcd\x1e\x6f\xd2\x4d\xf2\x29\x1e\xf4\x3a\x6a\xa8\xfc\x21\xbe\x05\x00\x00\xff\xff\xb8\x76\xa4\x4e\x32\x04\x00\x00")

func staticTemplatesRedirectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesRedirectHtml,
		"static/templates/redirect.html",
	)
}

func staticTemplatesRedirectHtml() (*asset, error) {
	bytes, err := staticTemplatesRedirectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/redirect.html", size: 1074, mode: os.FileMode(420), modTime: time.Unix(1517136076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/migrations/demo/data.sql": staticMigrationsDemoDataSql,
	"static/templates/error.html": staticTemplatesErrorHtml,
	"static/templates/redirect.html": staticTemplatesRedirectHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
			"demo": &bintree{nil, map[string]*bintree{
				"data.sql": &bintree{staticMigrationsDemoDataSql, map[string]*bintree{}},
			}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"error.html": &bintree{staticTemplatesErrorHtml, map[string]*bintree{}},
			"redirect.html": &bintree{staticTemplatesRedirectHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

