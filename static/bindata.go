// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/migrations/demo/fake_data.sql
// static/templates/error.html
// static/templates/redirect.html
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5f\x4f\xdb\x3e\x14\x7d\xf7\xa7\x38\x8a\x90\x28\xfc\x80\x87\xdf\x78\x40\x44\x7b\x48\x9b\xdb\x92\x2d\x75\x2a\xc7\x16\xa0\x69\xaa\xbc\xc6\x74\x91\x9a\x3f\x24\xce\x18\xdf\x7e\x4a\xdb\xd0\x12\x0a\xda\xde\x22\x9f\x73\xee\x3d\x39\xf7\xda\xe7\xe7\xf8\x2f\x4b\x97\x95\xb6\x06\xaa\x64\x6c\x24\xc8\x93\x04\xba\x93\xc4\xe3\x20\xe2\x70\x9a\x26\x4d\xce\x8b\xba\x2e\x1d\x97\xb1\x7d\x7a\x6c\xb5\x35\x99\xc9\xed\xd0\x2c\xd3\xbc\x53\x8e\x15\x1f\xc9\x56\xd8\x94\x89\xb6\x66\x6e\xd3\xcc\xd4\x56\x67\xe5\xe0\x04\x82\xa4\x12\x3c\x86\x14\xc1\x64\x42\x02\x5e\x8c\xa3\x3e\xed\x88\x0d\x69\x12\x70\x06\x70\xba\xbd\xd8\xa0\xc9\x5c\x5b\x5c\x7f\xc6\xa2\xa9\x2a\x93\xdb\x1d\xd9\x65\xd8\x16\x6d\xd9\x6e\x6b\xef\xdb\xe5\xff\x57\x57\x9f\xbe\x83\x84\x88\xc4\x35\x16\x45\xb3\x4a\x90\x17\x16\x69\x62\x72\x9b\x3e\x3c\x43\xe7\x30\x8f\x8d\x5e\xa5\xf6\x19\x45\x69\x2a\x6d\x8b\x0a\x0f\x45\x05\xfb\x5c\x1a\xfc\xce\x56\x6d\x19\x20\x18\xaf\x1d\x9c\x22\x88\xe1\x07\xb1\x0c\xf8\x48\x62\x2c\xa2\x29\xa2\xd0\xbf\x38\x85\xbc\x21\xbe\x61\xfe\xa5\xd5\x2d\xb7\xe7\x17\xa0\x30\xa6\x1e\x18\x85\x7e\x07\x72\x1f\xc1\xd8\x65\xc4\x7d\x97\xbd\x0d\x0b\xa1\xc7\x27\xca\x9b\x10\xca\x55\xb9\xac\x1f\x57\xee\xe1\x11\x51\x9e\xbc\xcc\x56\xde\xcf\x08\xb1\xf4\xa4\x8a\xdb\x09\x10\x57\x53\x0c\x8e\x4d\xae\x7f\xac\x4c\x72\x7c\x76\x9c\xa4\xf5\xe6\xf3\xc4\xdd\x69\xbc\x61\x48\x70\x1e\x8a\x2a\x9b\xd7\x8b\x9f\x26\xd3\x0e\x06\x0c\x9b\xed\x70\xa0\x54\xe0\x83\x47\x12\x5c\x85\x21\x66\x22\x98\x7a\xe2\x1e\x5f\xe9\x1e\x3e\x8d\x3d\x15\x4a\xb4\xbc\xf9\xd2\xe4\x6d\xdc\x66\xfe\xeb\x72\x70\x72\xb6\x96\xd7\xa6\xea\xc9\xd7\xe7\x5d\x8f\xbb\x69\xd8\x03\xac\xb6\x4d\xed\x74\xfe\x5f\x7a\x76\x7d\x76\xff\xd1\xb2\x17\x95\xd9\xce\xc4\x81\x0c\xa6\x14\x4b\x6f\x3a\x7b\x2b\xca\x8b\xa7\xce\xcf\xcb\x10\xf7\x04\x6c\x3f\x88\xed\xea\x6e\xa2\x48\xb4\xd5\xf3\xad\xc6\xc1\x90\xc6\x91\x20\xa8\x99\xdf\x32\xdb\xbb\xf3\x2a\xaf\x71\x24\x40\xde\xe8\x06\x22\xba\x05\xdd\xd1\x48\x49\xc2\x4c\x44\x23\xf2\x95\xa0\x03\xf7\xe5\x70\xfc\x6d\xcf\x6d\xf8\x6d\xf4\x31\x89\xc0\x7b\x95\xf9\xd9\x3b\x73\x59\x9f\x6f\xd4\x5f\xe2\x88\x0f\x5f\x03\xff\x12\xd5\x3a\x90\xfd\x3d\xf3\x8b\xa7\x9c\x31\x5f\x44\xb3\xb7\x56\xdd\x0e\xf8\x20\xb9\x7e\x56\xee\x81\x62\x7d\x68\xb7\xc5\xdd\xd1\x07\x4f\x4f\x47\x79\xe7\x5d\xfb\x13\x00\x00\xff\xff\xab\x0e\x95\x1f\x06\x05\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 1286, mode: os.FileMode(420), modTime: time.Unix(1511463355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrationsDemoFake_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xc1\x4e\x1b\x31\x10\x86\xef\xfb\x14\xa3\xb9\x6c\xa2\xc6\x6c\x02\x0b\x2d\x90\x45\xad\x84\xab\x22\x51\x90\x42\x68\x8f\x91\xb1\x27\x89\x55\xdb\xeb\x7a\x6d\x96\xaa\xea\xbb\x57\x0e\x44\x4a\xab\x1c\x5a\x8e\xbf\x65\x7d\xff\x67\xcf\x30\x06\x6f\xac\x5e\x05\x11\x09\xee\x7d\x51\x5c\xdd\xdc\xf1\xd9\x1c\xae\x6e\xe6\xb7\x80\xcb\x36\xd8\x45\x27\xd7\x64\x05\xc2\x00\x53\xd2\x0a\x47\x98\x3a\x0a\x38\xc2\x97\xf3\x61\xf1\xe5\xc3\xf5\x3d\xbf\x83\x41\x59\x4f\xa4\x38\xa6\xf1\x29\x3b\x92\x74\xc8\xea\xf1\x69\xcd\x1e\x26\xe3\x77\xec\x88\xa4\x3c\x3c\x7e\x2b\x4f\x96\xa2\x2e\x47\x99\xb2\x58\x91\xa3\xdc\xb9\x78\xac\x07\xc3\x51\x59\x4c\x73\x15\x44\x1d\x0d\x35\xc8\xad\xd0\x06\xba\xf4\xd0\xc9\xa0\x7d\xd4\xad\x43\xb0\x14\xd7\xad\x6a\xd0\xb7\x5d\x44\x20\x27\xe3\x0f\x4f\x0d\x0a\xef\x8d\x96\x22\xdf\xa9\x9e\x58\xdf\xf7\x2c\x83\x58\x0a\x86\x9c\x6c\x15\x29\xbc\x28\x00\x00\xa6\xda\xf9\x14\xc1\x09\x4b\x0d\x52\xe6\x23\x3c\x13\xb6\x61\xa7\x1a\xc1\x8a\x27\x43\x6e\x15\xd7\x0d\x9e\xd4\x08\x81\xbe\x27\x1d\x48\x35\x38\xc1\x6a\x0f\x70\x11\x48\xe9\x40\x32\x6e\xa1\x6b\xad\x14\x39\x84\x47\x61\x52\x8e\x31\xfa\xee\xac\xaa\xbe\x09\xab\xcd\x41\x27\xac\x5e\x25\x63\xb4\x3b\xd0\x6e\xd9\x56\x19\x39\xad\xb2\xf7\x45\x51\x0e\xcf\xf7\xcd\x40\x89\xb8\x3b\x81\x4d\x1c\xc2\x7f\x7e\x7c\xf9\xf3\xe5\xb1\x67\xb8\x11\x79\xff\x97\x08\xfe\xda\xb4\xef\x6e\xc4\x65\xdb\xbb\xa2\xb8\xe4\xd7\x7c\xce\xe1\xe3\xec\xf6\xf3\x1f\x3e\x5f\x3f\xf1\x19\x87\x67\x29\x68\xe0\xdf\x34\xce\xf7\xf1\xb6\x3b\xf6\x4a\xe2\xef\x00\x00\x00\xff\xff\x59\x54\x1d\xd3\xc5\x02\x00\x00")

func staticMigrationsDemoFake_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrationsDemoFake_dataSql,
		"static/migrations/demo/fake_data.sql",
	)
}

func staticMigrationsDemoFake_dataSql() (*asset, error) {
	bytes, err := staticMigrationsDemoFake_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/demo/fake_data.sql", size: 709, mode: os.FileMode(420), modTime: time.Unix(1513446154, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTemplatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x41\x8b\x83\x30\x10\x85\xef\xfe\x8a\xd9\xdc\xd5\xeb\xc2\x26\x5e\xd4\xbd\xee\xb2\x6b\x0f\x3d\xa6\xc9\xb4\x11\x62\xd2\x8e\x63\x41\x24\xff\xbd\x04\x5b\xe8\xe9\x31\xf3\xf1\xe0\x7b\xf2\xa3\xfb\x69\x87\xe3\x6f\x0f\x8e\x27\xdf\x14\x32\x07\x78\x1d\x2e\x4a\x60\x10\xf9\x81\xda\x36\x05\x00\x80\x9c\x90\x35\x18\xa7\x69\x46\x56\xe2\x30\x7c\x97\x9f\xe2\x89\x78\x64\x8f\x4d\x4f\x14\x09\xb6\x0d\xaa\x36\x5a\x84\x94\x64\xbd\x83\xb7\xbe\x63\xbe\x96\x78\x5b\xc6\xbb\x12\x84\x67\xc2\xd9\x09\x30\x31\x30\x06\x56\x22\x77\x3b\xf4\x7a\xad\xfe\xd1\xc4\x60\x67\x48\xe9\x6b\x21\xaf\x32\xf8\x43\x3b\x12\x1a\x86\x94\xb2\x59\xbd\xab\xc9\x53\xb4\x6b\x3e\x5f\xb9\x2f\x79\x04\x00\x00\xff\xff\x90\xaa\x44\xca\xda\x00\x00\x00")

func staticTemplatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesErrorHtml,
		"static/templates/error.html",
	)
}

func staticTemplatesErrorHtml() (*asset, error) {
	bytes, err := staticTemplatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/error.html", size: 218, mode: os.FileMode(420), modTime: time.Unix(1513446154, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTemplatesRedirectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x31\x0b\xc2\x30\x10\x85\xf7\xfe\x8a\x33\x7b\xdb\x55\x30\xe9\x62\x75\x55\xb4\x0e\x8e\x31\x39\x4d\x21\x4d\x35\xbd\x0a\xa5\xe4\xbf\xcb\x51\x05\xa7\x77\xf7\x1e\x0f\xbe\x27\x57\xf5\x61\xdb\x5c\x8f\x3b\x70\xd4\xf9\x2a\x93\x2c\xe0\x75\x78\x28\x81\x41\xb0\x81\xda\x56\x19\x00\x80\xec\x90\x34\x18\xa7\xe3\x80\xa4\xc4\xa5\xd9\xe7\x6b\xf1\x8d\xa8\x25\x8f\xd5\x3c\x43\xd1\xf0\x05\x29\xc9\x72\xf1\xfe\xaa\x8e\xe8\x99\xe3\x6b\x6c\xdf\x4a\x44\xbc\x47\x1c\x9c\x00\xd3\x07\xc2\x40\x4a\x70\xb9\x46\xaf\xa7\xe2\x8c\xa6\x0f\x76\x80\x94\x36\x63\xf4\x8a\x83\x13\xda\x36\xa2\x21\x48\x89\xa1\xca\x85\x4a\xde\x7a\x3b\xf1\xfb\xd3\x65\xc4\x27\x00\x00\xff\xff\x59\x33\x9f\x47\xd5\x00\x00\x00")

func staticTemplatesRedirectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplatesRedirectHtml,
		"static/templates/redirect.html",
	)
}

func staticTemplatesRedirectHtml() (*asset, error) {
	bytes, err := staticTemplatesRedirectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/templates/redirect.html", size: 213, mode: os.FileMode(420), modTime: time.Unix(1513446154, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/migrations/demo/fake_data.sql": staticMigrationsDemoFake_dataSql,
	"static/templates/error.html": staticTemplatesErrorHtml,
	"static/templates/redirect.html": staticTemplatesRedirectHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
			"demo": &bintree{nil, map[string]*bintree{
				"fake_data.sql": &bintree{staticMigrationsDemoFake_dataSql, map[string]*bintree{}},
			}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"error.html": &bintree{staticTemplatesErrorHtml, map[string]*bintree{}},
			"redirect.html": &bintree{staticTemplatesRedirectHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

