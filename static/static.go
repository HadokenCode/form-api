// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/template/error.html
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x51\x4f\xdb\x3e\x14\xc5\xdf\xf3\x29\x8e\x22\x24\x0a\x7f\xca\xc3\x7f\x3c\x20\xa2\x3d\xa4\xcd\x4d\xc9\x96\xda\x95\x63\x0b\xd0\x34\x55\x5e\x63\x58\xa4\x36\x09\x89\x33\xc6\xb7\x9f\xd2\x36\xb4\x84\x82\xb6\xb7\xc8\xe7\x1c\xdf\x9b\xdf\xb5\x3d\x1c\xe2\xbf\x55\xf6\x50\x69\x6b\xa0\x4a\xc7\x19\x0b\xf2\x25\x81\x6e\x25\xb1\x24\xe2\x0c\x6e\xd3\x64\xe9\xb0\xa8\xeb\xd2\xf5\x5e\xe4\x50\xb1\xb1\x6c\xd5\xa6\x4c\xb5\x35\x73\x9b\xad\x4c\x6d\xf5\xaa\x1c\x9c\x40\x90\x54\x82\x25\x90\x22\x9a\x4c\x48\xc0\x4f\x70\xd4\xb7\x1d\x39\x23\x9a\x44\xcc\x01\x18\xdd\x9c\x6f\xd4\x74\xae\x2d\xae\x3e\x63\xd1\x54\x95\xc9\xed\xce\xec\x39\xd8\x6e\xda\xba\x3d\x67\x38\xc4\xb7\x8b\xff\x2f\x2f\x3f\x7d\x07\x09\xc1\xc5\x15\x16\x45\xb3\x4c\x91\x17\x16\x59\x6a\x72\x9b\xdd\x3f\x43\xe7\x30\x8f\x8d\x5e\x66\xf6\x19\x45\x69\x2a\x6d\x8b\x0a\xf7\x45\x05\xfb\x5c\x1a\xfc\x5e\x2d\xdb\x6d\x80\x28\x5c\x77\x70\x8a\x28\x41\x10\x25\x32\x62\x63\x89\x50\xf0\x29\x78\x1c\x9c\x9f\x42\x5e\x13\xdb\x38\xff\xb2\xd5\xad\xb7\xd7\x2f\x40\x71\x42\x3d\x91\xc7\x41\x27\xb2\x00\x51\xe8\x39\xc4\x02\xcf\x79\x0b\x0b\xb1\xcf\x26\xca\x9f\x10\xca\x65\xf9\x50\x3f\x2e\x77\x83\x90\x77\x33\x42\x22\x7d\xa9\x92\x16\x34\x31\x35\xc5\xe0\xd8\xe4\xfa\xc7\xd2\xa4\xc7\x67\xc7\x69\x56\x6f\x3e\x4f\xf6\x32\xfe\x28\x26\xb8\xf7\x45\xb5\x9a\xd7\x8b\x9f\x66\xa5\x5d\x0c\x1c\x6c\x26\xed\x42\xa9\x28\x00\xe3\x12\x4c\xc5\x31\x66\x22\x9a\xfa\xe2\x0e\x5f\xe9\x0e\x01\x85\xbe\x8a\x25\x5a\xdf\xfc\xc1\xe4\x2d\x55\x33\xff\x75\x31\x38\x39\x5b\xc7\x6b\x53\xf5\xe2\xeb\xf5\xae\xc6\xed\x34\xee\x09\x56\xdb\xa6\x76\xbb\xfe\x5f\x6a\x76\x75\x76\xff\xd1\xba\x17\x95\xd9\xa2\x77\x21\xa3\x29\x25\xd2\x9f\xce\xde\x86\xf2\xe2\xa9\xeb\xe7\x65\x56\x7b\x01\x67\x1f\xc4\xf6\x84\x6e\x50\xa4\xda\xea\xf9\x36\xe3\x62\x44\x21\x17\x04\x35\x0b\x5a\x67\x7b\x0f\x5e\xf1\x0a\xb9\x00\xf9\xe3\x6b\x08\x7e\x03\xba\xa5\xb1\x92\x84\x99\xe0\x63\x0a\x94\xa0\x03\xd7\xe2\x30\xfe\xb6\xe6\x16\x7e\x8b\x3e\x21\x11\xf9\xaf\x98\x9f\xbd\x33\x97\xf5\xfa\x26\xfd\x25\xe1\x6c\xf4\x5a\xf8\x17\x54\x6b\x20\xfb\xaf\x40\x50\x3c\xe5\x8e\x13\x08\x3e\x7b\xdb\xaa\xd7\x09\x1f\x90\xeb\xb3\xf2\x0e\x6c\xd6\x97\x76\xa7\xb8\x5b\xfa\xe0\x85\xe9\x2c\xef\xbc\x51\x7f\x02\x00\x00\xff\xff\xb3\xd5\x31\xc3\xd2\x04\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 1234, mode: os.FileMode(420), modTime: time.Unix(1510853201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticTemplateErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x01\x51\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x20\x81\xd4\xc4\x14\x3b\x2e\x05\x05\x05\x05\x9b\xdc\xd4\x92\x44\x85\xe4\x8c\xc4\xa2\xe2\xd4\x12\x5b\xa5\xd0\x10\x37\x5d\x0b\x25\xa8\x54\x49\x66\x49\x4e\xaa\x9d\x6b\x51\x51\x7e\x91\x42\x75\xb5\x82\x9e\x73\x7e\x4a\xaa\x42\x6d\xad\x8d\x3e\x44\x82\xcb\x46\x1f\x62\x8e\x4d\x52\x7e\x4a\x25\x88\x0b\xa3\x21\xd6\x02\x02\x00\x00\xff\xff\x6d\x33\x58\x59\x87\x00\x00\x00")

func staticTemplateErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticTemplateErrorHtml,
		"static/template/error.html",
	)
}

func staticTemplateErrorHtml() (*asset, error) {
	bytes, err := staticTemplateErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/template/error.html", size: 135, mode: os.FileMode(420), modTime: time.Unix(1511438765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/template/error.html": staticTemplateErrorHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
		}},
		"template": &bintree{nil, map[string]*bintree{
			"error.html": &bintree{staticTemplateErrorHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

